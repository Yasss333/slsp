%% First Program: Cross-correlation using xcorr()

clc;
close all;
clear;

% Take input from the user for the sequences x and h
x = input('Enter input sequence (as a vector): ');
h = input('Enter the impulse sequence (as a vector): ');

% Plot the input signal x(n)
subplot(3,1,1);
stem(x);
xlabel('n');
ylabel('x(n)');
title('Input Signal');

% Plot the impulse signal h(n)
subplot(3,1,2);
stem(h);
xlabel('n');
ylabel('h(n)');
title('Impulse Signal');

% Compute the cross-correlation of x and h
y = xcorr(x, h);

% Plot the correlation signal y(n)
subplot(3,1,3);
stem(y);
xlabel('n');
ylabel('y(n)');
title('Correlation Signal');

% Display the resultant signal in the command window
disp('The resultant signal is:');
disp(y);

%% Second Program: Manual Cross-Correlation (Sequence Method)

clc;
close all;
clear;

% Taking input for x(n) and its time indices
x = input('Enter input sequence of x(n): ');
n1 = input('Enter the time indices of x(n): ');

% Taking input for y(n) and its time indices
y = input('Enter the sequence of y(n): ');
n2 = input('Enter the time indices of y(n): ');

% Time reversal of y(n) to get y(-n)
n22 = -fliplr(n2); % Flip time indices of y(n) and make them negative
y1 = fliplr(y);     % Flip the sequence y(n)

% Time index for cross-correlation result
n = min(n1) + min(n22) : max(n1) + max(n22);

% Initialize matrix A for partial product storage
A = zeros(min(length(x), length(y1)), length(x) + length(y1) - 1);

% Cross-correlation logic
if length(x) < length(y1)
    for i = 1:length(x)
        A(i, i:i+length(y1)-1) = y1;
        A(i,:) = x(i) .* A(i,:);
    end
else
    for i = 1:length(y1)
        A(i, i:i+length(x)-1) = x;
        A(i,:) = y1(i) .* A(i,:);
    end
end

% Summing partial products
c = zeros(1, length(x) + length(y1) - 1);
for i = 1:min(length(x), length(y1))
    c = c + A(i,:);
end

% Display the cross-correlation and its time indices
disp('The Cross correlation between the given sequences is:');
disp(c);
disp('The Time index of the Cross correlation is:');
disp(n);

% Plotting
subplot(3,1,1);
stem(n1, x, 'o');
xlabel('time');
ylabel('amplitude');
grid on;
title('Given sequence x(n)');

subplot(3,1,2);
stem(n22, y1, 'o');
xlabel('time');
ylabel('amplitude');
grid on;
title('Sequence y(-n)');

subplot(3,1,3);
stem(n, c, 'o');
xlabel('time');
ylabel('amplitude');
grid on;
title('Cross correlation of x(n) and y(n)');

%% Third Program: Cross-Correlation of Continuous-Time Sine Signals

clc;
close all;
clear;

% Input frequency of first signal
f1 = input('Enter the frequency of signal1: ');
T1 = 1/f1;
t1 = 0:T1/f1:T1;
x = sin(2*pi*f1*t1); % Sine wave x(t)

% Input frequency of second signal
f2 = input('Enter the frequency of signal2: ');
T2 = 1/f2;
t2 = 0:T2/f2:T2;
y = sin(2*pi*f2*t2); % Sine wave y(t)

% Time reversal of second signal
t22 = -fliplr(t2);
y1 = fliplr(y);

% Initialize matrix A
A = zeros(min(length(x),length(y1)), length(x)+length(y1)-1);

% Cross-correlation logic
if length(x) < length(y1)
    for i = 1:length(x)
        A(i, i:i+length(y1)-1) = y1;
        A(i,:) = x(i) .* A(i,:);
    end
else
    for i = 1:length(y1)
        A(i, i:i+length(x)-1) = x;
        A(i,:) = y1(i) .* A(i,:);
    end
end

% Summing partial products
c = zeros(1, length(x) + length(y1) - 1);
for i = 1:min(length(x), length(y1))
    c = c + A(i,:);
end

% Time vector for plotting correlation result
t = linspace(min(t1)+min(t22), max(t1)+max(t22), length(c));

% Plot signals
subplot(3,1,1);
plot(t1, x);
xlabel('time');
ylabel('amplitude');
grid on;
title(['Given signal x(t) with f = ', num2str(f1)]);

subplot(3,1,2);
plot(t22, y1);
xlabel('time');
ylabel('amplitude');
grid on;
title(['Signal y(-t) with f = ', num2str(f2)]);

subplot(3,1,3);
plot(t, c);
xlabel('time');
ylabel('amplitude');
grid on;
title('Cross correlation of x(t) and y(t)');

%% Fourth Program: Auto-Correlation (Using xcorr with itself)

clc;
close all;
clear;

x = [1,2,3,4,5]; % Define first input signal x(n)
y = [4,1,5,2,6]; % Define second input signal y(n)

% Plotting x(n)
subplot(3,1,1);
stem(x);
xlabel('n');
ylabel('x(n)');
title('Input signal x(n)');
grid on;

% Plotting y(n)
subplot(3,1,2);
stem(y);
xlabel('n');
ylabel('y(n)');
title('Input signal y(n)');
grid on;

% Cross-correlation of x with itself (Auto-correlation)
z = xcorr(x, x);

% Plotting resultant signal
subplot(3,1,3);
stem(z);
xlabel('n');
ylabel('z(n)');
title('Resultant auto-correlation signal');
grid on;
